diff --git a/src/libs/ck-libs/collide/collidecharm.C b/src/libs/ck-libs/collide/collidecharm.C
index 68b444057..6e6e97d02 100644
--- a/src/libs/ck-libs/collide/collidecharm.C
+++ b/src/libs/ck-libs/collide/collidecharm.C
@@ -340,6 +340,9 @@ collideMgr::collideMgr(const CollideGrid3d &gridMap_,
   collisionStarted = false;
 }
 
+collideMgr::collideMgr(CkMigrateMessage* m) : CBase_collideMgr(m),
+    aggregator(gridMap,this) {}
+
 //Maintain contributor registration count
 void collideMgr::registerContributor(int chunkNo)
 {
@@ -586,6 +589,10 @@ void collideVoxel::startCollision(int step,
   CC_STATUS("} startCollision");
 }
 
+collideClient::collideClient() {}
+
+collideClient::collideClient(CkMigrateMessage* m) : Group(m) {}
+
 collideClient::~collideClient() {}
 
 /********************** serialCollideClient *****************/
@@ -596,6 +603,8 @@ serialCollideClient::serialCollideClient(void) {
   useCb = false;
 }
 
+serialCollideClient::serialCollideClient(CkMigrateMessage* m) : collideClient(m) {}
+
 serialCollideClient::serialCollideClient(CkCallback clientCb_) {
   clientFn=NULL;
   clientParam=NULL;
@@ -639,6 +648,8 @@ distributedCollideClient::distributedCollideClient(CkCallback clientCb_) {
   clientCb.transformBcastToLocalElem();
 }

+distributedCollideClient::distributedCollideClient(CkMigrateMessage* m) : collideClient(m) {}
+
 void distributedCollideClient::collisions(int step,CollisionList &colls)
 {
   // Invoke clientCb
diff --git a/src/libs/ck-libs/collide/collidecharm.ci b/src/libs/ck-libs/collide/collidecharm.ci
index 7676bbd32..98328bd41 100644
--- a/src/libs/ck-libs/collide/collidecharm.ci
+++ b/src/libs/ck-libs/collide/collidecharm.ci
@@ -3,17 +3,17 @@ module collidecharm {
 
   group collideClient {
   };
-  group serialCollideClient : collideClient {
+  group [migratable] serialCollideClient : collideClient {
     entry serialCollideClient();
     entry serialCollideClient(CkCallback clientCb_);
     entry void reductionDone(CkReductionMsg *m);
   };
 
-  group distributedCollideClient : collideClient {
+  group [migratable] distributedCollideClient : collideClient {
     entry distributedCollideClient(CkCallback clientCb_);
   };

-  group collideMgr {
+  group [migratable] collideMgr {
     entry collideMgr(CollideGrid3d gridMap,
         CProxy_collideClient client,
         CkArrayID cells);
diff --git a/src/libs/ck-libs/collide/collidecharm.h b/src/libs/ck-libs/collide/collidecharm.h
index cb595a95b..e72f09ccf 100644
--- a/src/libs/ck-libs/collide/collidecharm.h
+++ b/src/libs/ck-libs/collide/collidecharm.h
@@ -22,6 +22,8 @@
   */
 class collideClient : public Group {
   public:
+    collideClient();
+    collideClient(CkMigrateMessage* m);
     virtual ~collideClient();
     virtual void collisions(int step,CollisionList &colls) =0;
 };
diff --git a/src/libs/ck-libs/collide/collidecharm_impl.h b/src/libs/ck-libs/collide/collidecharm_impl.h
index 8ea606fd3..fb257bb75 100644
--- a/src/libs/ck-libs/collide/collidecharm_impl.h
+++ b/src/libs/ck-libs/collide/collidecharm_impl.h
@@ -131,6 +131,7 @@ class collideMgr : public CBase_collideMgr
   collideMgr(const CollideGrid3d &gridMap,
       const CProxy_collideClient &client,
       const CProxy_collideVoxel &voxels);
+  collideMgr(CkMigrateMessage* m);
 
   //Maintain contributor registration count
   void registerContributor(int chunkNo);
@@ -194,6 +195,7 @@ class serialCollideClient : public collideClient {
   public:
   serialCollideClient(void);
   serialCollideClient(CkCallback clientCb_);
+  serialCollideClient(CkMigrateMessage *m);
 
   /// Call this client function on processor 0:
   void setClient(CollisionClientFn clientFn,void *clientParam);
@@ -213,6 +215,7 @@ class distributedCollideClient : public collideClient {
   CkCallback clientCb;
   public:
   distributedCollideClient(CkCallback clientCb_);
+  distributedCollideClient(CkMigrateMessage *m);

   /// Called by voxel array on each processor:
   virtual void collisions(int step,CollisionList &colls);
